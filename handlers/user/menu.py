from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery
from aiogram.types import Message
from loguru import logger
from datetime import datetime
from data.config import ADMIN_USER_ID
from data.config import router, bot
from database.database import get_user_data, add_user_starting_the_bot, check_for_bot_launch
from keyboards.keyboard_user.keyboards import (generate_authorized_user_discription, generate_main_menu_keyboard,
                                               generate_admin_button)
from utils.read_text import load_text_form_file

menu_text = ("–ü—Ä–∏–≤–µ—Ç! üí™ –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –≤ –º–∏—Ä–µ —Å–ø–æ—Ä—Ç–∞! üöÄ\n\n"

             "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"

             "–ù–µ–≤–∞–∂–Ω–æ, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É, —É–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É ‚Äî —è "
             "–∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ù–∞—á–Ω—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? üòé")


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    –¢–∞–∫ –∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É.
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
    """
    try:
        user_id = message.from_user.id
        if check_for_bot_launch(user_id):
            # await message.answer(
            #     f"{load_text_form_file('text_authorized_user_greeting.json')}",
            #     reply_markup=generate_admin_button() if user_id == ADMIN_USER_ID else generate_user_options_keyboard(),
            # )
            # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start
            add_user_starting_the_bot(
                id_user=message.from_user.id,
                is_bot=message.from_user.is_bot or "",
                first_name=message.from_user.first_name or "",
                last_name=message.from_user.last_name or "",
                username=message.from_user.username or "",
                language_code=message.from_user.language_code or "",
                is_premium=message.from_user.is_premium or "",
                added_to_attachment_menu=message.from_user.added_to_attachment_menu or "",
                can_join_groups=message.from_user.can_join_groups or "",
                can_read_all_group_messages=message.from_user.can_read_all_group_messages or "",
                supports_inline_queries=message.from_user.supports_inline_queries or "",
                can_connect_to_business=message.from_user.can_connect_to_business or "",
                has_main_web_app=message.from_user.has_main_web_app or "",
                user_date=message.date.strftime("%Y-%m-%d %H:%M:%S")
            )

            await message.answer(menu_text, reply_markup=generate_main_menu_keyboard())

        else:

            if get_user_data(ADMIN_USER_ID):

                await message.answer(f"{load_text_form_file('text_authorized_user_greeting.json')}",
                                     reply_markup=generate_admin_button(),
                                     )
            else:
                # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start
                add_user_starting_the_bot(
                    id_user=message.from_user.id,
                    is_bot=message.from_user.is_bot or "",
                    first_name=message.from_user.first_name or "",
                    last_name=message.from_user.last_name or "",
                    username=message.from_user.username or "",
                    language_code=message.from_user.language_code or "",
                    is_premium=message.from_user.is_premium or "",
                    added_to_attachment_menu=message.from_user.added_to_attachment_menu or "",
                    can_join_groups=message.from_user.can_join_groups or "",
                    can_read_all_group_messages=message.from_user.can_read_all_group_messages or "",
                    supports_inline_queries=message.from_user.supports_inline_queries or "",
                    can_connect_to_business=message.from_user.can_connect_to_business or "",
                    has_main_web_app=message.from_user.has_main_web_app or "",
                    user_date=message.date.strftime("%Y-%m-%d %H:%M:%S")
                )

                await message.answer(menu_text, reply_markup=generate_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")


@router.callback_query(F.data == "description")
async def bot_description(callback_query: CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param callback_query: –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "–æ–ø–∏—Å–∞–Ω–∏–µ".
    """
    await callback_query.message.edit_text(f"{load_text_form_file('text_description.json')}",
                                           reply_markup=generate_authorized_user_discription())


@router.callback_query(F.data == "start_handler")
async def start_handler_callback(callback_query: types.CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        add_user_starting_the_bot(id_user=callback_query.from_user.id,
                                  is_bot=callback_query.from_user.is_bot or "",
                                  first_name=callback_query.from_user.first_name or "",
                                  last_name=callback_query.from_user.last_name or "",
                                  username=callback_query.from_user.username or "",
                                  language_code=callback_query.from_user.language_code or "",
                                  is_premium=callback_query.from_user.is_premium or "",
                                  added_to_attachment_menu=callback_query.from_user.added_to_attachment_menu or "",
                                  can_join_groups=callback_query.from_user.can_join_groups or "",
                                  can_read_all_group_messages=callback_query.from_user.can_read_all_group_messages or "",
                                  supports_inline_queries=callback_query.from_user.supports_inline_queries or "",
                                  can_connect_to_business=callback_query.from_user.can_connect_to_business or "",
                                  has_main_web_app=callback_query.from_user.has_main_web_app or "",
                                  user_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=menu_text,
                               reply_markup=generate_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def register_menu():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
    router.message.register(start_handler)  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    router.callback_query.register(start_handler_callback)  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    router.callback_query.add_callback(bot_description)
