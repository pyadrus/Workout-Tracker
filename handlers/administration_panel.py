from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from handlers.start import ADMIN_USER_ID, load_text_form_file
from database.database import (
    get_user_starting_the_bot,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
)
from keyboards.keyboards import (
    generate_admin_panel_keyboard,
)

routerrrrrrrrr = Router()  # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.


class MessageStorage(StatesGroup):
    message_to_be_sent = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π-–ø–∞–Ω–µ–ª–∏
@routerrrrrrrrr.callback_query(F.data == "admin_panel")
async def login_to_the_admin_panel(callback_query: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param callback_query:
    """
    await callback_query.message.answer(
        f"{load_text_form_file('text_admin_panel.json')}",
        reply_markup=generate_admin_panel_keyboard(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@routerrrrrrrrr.callback_query(F.data == "sending_messages")
async def messages_by_user(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param callback_query:
    :param state:
    """
    await state.set_state(MessageStorage.message_to_be_sent)
    await callback_query.message.answer(
        "üí¨ –ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞?"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@routerrrrrrrrr.message(MessageStorage.message_to_be_sent)
async def sending_messages_by_user(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param message:
    :param state:
    """
    await state.update_data(message_to_be_sent=message.text)
    message_storage = await state.get_data()
    admin_messages = message_storage["message_to_be_sent"]
    await message.answer(f"{load_text_form_file('text_sending_message.json')}")
    await message.answer(
        f"{load_text_form_file('text_admin_panel.json')}",
        reply_markup=generate_admin_panel_keyboard(),
    )

    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@routerrrrrrrrr.callback_query(F.data == "statistics")
async def user_activity_analysis(callback_query: CallbackQuery) -> None:
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param callback_query:
    """
    await callback_query.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
