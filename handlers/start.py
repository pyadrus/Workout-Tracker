# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ aiogram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
# –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ FSM (Finite State Machine) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

import json
from pathlib import Path

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message

from database.database import (
    get_user_data,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
)
from keyboards.keyboards import (
    generate_authorized_user_discription,
    generate_authorized_user_options_keyboard,
    generate_user_options_keyboard,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
)

router = Router()  # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.


# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ json –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤
def load_text_form_file(file_name):
    file_path = Path(f"messages/{file_name}")
    if (
        file_path.exists()
    ):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true , –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ false ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞
    return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
@router.message(CommandStart())
async def start_bot(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
    """
    username = message.from_user.username
    user_id = message.from_user.id
    data_user = get_user_data(user_id)
    if not data_user:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, @{username}{load_text_form_file('text_hello_welcome.json')}",
            reply_markup=generate_user_options_keyboard(),
        )
    else:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, @{username}{load_text_form_file('text_authorized_user_greeting.json')}",
            reply_markup=generate_authorized_user_options_keyboard(),
        )


@router.callback_query(F.data == "description")
async def description(callback_query: CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º "–æ–ø–∏—Å–∞–Ω–∏–µ".
    """
    await callback_query.message.answer(
        f"‚ÑπÔ∏è {load_text_form_file('text_description.json')}",
        reply_markup=generate_authorized_user_discription(),
    )
