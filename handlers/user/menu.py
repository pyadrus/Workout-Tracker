# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ aiogram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
# –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ FSM (Finite State Machine) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery
from aiogram.types import Message
from loguru import logger

from data.config import ADMIN_USER_ID
from data.config import router, bot
from database.database import (get_user_data,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                               add_user_starting_the_bot,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               )
from keyboards.keyboard_user.keyboard_menu import keyboard_menu
from keyboards.keyboards import (generate_authorized_user_discription, generate_authorized_user_options_keyboard,
                                 generate_user_options_keyboard, generate_admin_button)
from utils.read_text import load_text_form_file


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"{message}")
        user_id = message.from_user.id
        user_name = message.from_user.username or ""
        user_first_name = message.from_user.first_name or ""
        user_last_name = message.from_user.last_name or ""
        user_date = message.date.strftime("%Y-%m-%d %H:%M:%S")

        is_bot = message.from_user.is_bot
        language_code = message.from_user.language_code
        is_premium = message.from_user.is_premium
        added_to_attachment_menu = message.from_user.added_to_attachment_menu
        can_join_groups = message.from_user.can_join_groups
        can_read_all_group_messages = message.from_user.can_read_all_group_messages
        supports_inline_queries = message.from_user.supports_inline_queries
        can_connect_to_business = message.from_user.can_connect_to_business
        has_main_web_app = message.from_user.has_main_web_app

        logger.info(f"User Info: {user_id}, {user_name}, {user_first_name}, {user_last_name}, {user_date}")

        add_user_starting_the_bot(id_user=user_id,
                                  is_bot=is_bot,
                                  first_name=user_first_name,
                                  last_name=user_last_name,
                                  username=user_name,
                                  language_code=language_code,
                                  is_premium=is_premium,
                                  added_to_attachment_menu=added_to_attachment_menu,
                                  can_join_groups=can_join_groups,
                                  can_read_all_group_messages=can_read_all_group_messages,
                                  supports_inline_queries=supports_inline_queries,
                                  can_connect_to_business=can_connect_to_business,
                                  has_main_web_app=has_main_web_app,
                                  )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

        menu_text = ("–ü—Ä–∏–≤–µ—Ç! üí™ –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –≤ –º–∏—Ä–µ —Å–ø–æ—Ä—Ç–∞! üöÄ\n\n"

                     "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"

                     "–ù–µ–≤–∞–∂–Ω–æ, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É, —É–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É ‚Äî —è "
                     "–∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ù–∞—á–Ω—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? üòé")

        await message.answer(menu_text, reply_markup=keyboard_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")


@router.message(CommandStart())
async def start_bot_command(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    –¢–∞–∫ –∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É.
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
    """
    telegram_user_data: dict[str, str] = (dict())  # –í —Å–ª–æ–≤–∞—Ä–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º.
    for key, value in message.from_user:
        telegram_user_data[key] = value

    if not get_user_data(telegram_user_data["id"]):
        await message.answer(f"{load_text_form_file('text_hello_welcome.json')}",
                             reply_markup=generate_user_options_keyboard())

        add_user_starting_the_bot(id_user=telegram_user_data["id"],
                                  is_bot=telegram_user_data["is_bot"],
                                  first_name=telegram_user_data["first_name"],
                                  last_name=telegram_user_data["last_name"],
                                  username=telegram_user_data["username"],
                                  language_code=telegram_user_data["language_code"],
                                  is_premium=telegram_user_data["is_premium"],
                                  added_to_attachment_menu=telegram_user_data["added_to_attachment_menu"],
                                  can_join_groups=telegram_user_data["can_join_groups"],
                                  can_read_all_group_messages=telegram_user_data["can_read_all_group_messages"],
                                  supports_inline_queries=telegram_user_data["supports_inline_queries"],
                                  can_connect_to_business=telegram_user_data["can_connect_to_business"],
                                  has_main_web_app=telegram_user_data["has_main_web_app"],
                                  )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

    else:
        if get_user_data(ADMIN_USER_ID):
            await message.answer(
                f"{load_text_form_file('text_authorized_user_greeting.json')}",
                reply_markup=generate_admin_button(),
            )
        else:
            await message.answer(
                f"{load_text_form_file('text_authorized_user_greeting.json')}",
                reply_markup=generate_authorized_user_options_keyboard(),
            )


@router.callback_query(F.data == "description")
async def bot_description(callback_query: CallbackQuery) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param callback_query: –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "–æ–ø–∏—Å–∞–Ω–∏–µ".
    """
    await callback_query.message.edit_text(f"{load_text_form_file('text_description.json')}",
                                           reply_markup=generate_authorized_user_discription())


@router.callback_query(F.data == "start_handler")
async def start_handler_callback(callback_query: types.CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        user_id = callback_query.from_user.id
        user_name = callback_query.from_user.username or ""
        user_first_name = callback_query.from_user.first_name or ""
        user_last_name = callback_query.from_user.last_name or ""
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_date = callback_query.message.date.strftime("%Y-%m-%d %H:%M:%S")

        logger.info(f"User Info: {user_id}, {user_name}, {user_first_name}, {user_last_name}, {user_date}")

        menu_text = ("–ü—Ä–∏–≤–µ—Ç! üí™ –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –≤ –º–∏—Ä–µ —Å–ø–æ—Ä—Ç–∞! üöÄ\n\n"

                     "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"

                     "–ù–µ–≤–∞–∂–Ω–æ, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É, —É–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É ‚Äî —è "
                     "–∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ù–∞—á–Ω—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? üòé")

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=menu_text,
                               reply_markup=keyboard_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def register_menu():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
    router.message.register(start_handler)  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    router.callback_query.register(start_handler_callback)  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
