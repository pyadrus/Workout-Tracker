from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from database.database import (
    get_user_data,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    update_user_data,  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
)
from keyboards.keyboards import (
    generate_keyboard_personal_account,
    generate_authorized_user_options_keyboard,
    create_data_change_buttons,
)

routerr = Router()  # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.


class ChangeData(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏.
    height = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞.
    weight = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞.
    training_experience = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@routerr.message(F.text.lower() == "‚öôÔ∏è –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def users_personal_account(message: Message) -> None:
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=generate_keyboard_personal_account()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@routerr.message(F.text.lower() == "üìã –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
async def user_data(message: Message) -> None:
    username = message.from_user.username
    data_user = get_user_data(username)
    if data_user:
        _, name, height, weight, training_experience = data_user
        await message.answer(
            f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üë§ –ò–º—è - {name}\n"
            f"üìè –†–æ—Å—Ç - {height} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å - {weight} –∫–≥\n"
            f"üèãÔ∏è –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - {training_experience}",
            reply_markup=create_data_change_buttons(),
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
@routerr.callback_query(F.data == "update_name")
async def update_user_data_name(
    callback_query: CallbackQuery, state: FSMContext
) -> None:
    username = callback_query.from_user.username
    data_user = get_user_data(username)
    if data_user:
        await state.set_state(ChangeData.name)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å")


@routerr.message(ChangeData.name)
async def update_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    state_user_data = await state.get_data()
    username = message.from_user.username
    changed_name = state_user_data["name"]
    update_user_data(username=username, name=changed_name)
    await message.answer("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@routerr.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def back_to_main_menu(message: Message) -> None:
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=generate_authorized_user_options_keyboard(),
    )
